<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gmlee.stock.dao.mapper.StockStatsMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.gmlee.stock.dao.entity.StockStats">
        <id column="date" property="date" />
        <result column="strategy_id" property="strategyId" />
        <result column="sold" property="sold" />
        <result column="total" property="total" />
        <result column="qty" property="qty" />
        <result column="profit_num" property="profitNum" />
        <result column="loss_num" property="lossNum" />
        <result column="proportion" property="proportion" />
        <result column="rate" property="rate" />
        <result column="avg_rate" property="avgRate" />
        <result column="win_rate" property="winRate" />
        <result column="loss_rate" property="lossRate" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        date, strategy_id, sold, total, qty, profit_num, loss_num, proportion, rate, avg_rate, win_rate, loss_rate
    </sql>

    <!-- 统计查询 -->
    <select id="stats" resultMap="BaseResultMap">
        SELECT
        CURDATE() AS date,
        s.id AS strategy_id,
        (CASE WHEN d.sold THEN 1 WHEN !d.sold THEN 0 END) AS sold,
        t.total as total, COUNT(*) AS qty,
        SUM(CASE WHEN d.rise_ratio > 0 THEN 1 ELSE 0 END) AS profit_num,
        SUM(CASE WHEN d.rise_ratio > 0 THEN 0 ELSE 1 END) AS loss_num,
        ROUND(COUNT(*) / total * 100, 2) AS proportion,
        SUM(d.rise_ratio) AS rate,
        ROUND(SUM(d.rise_ratio) / COUNT(*), 2) AS avg_rate,
        ROUND(SUM(CASE WHEN d.rise_ratio > 0 THEN 1 ELSE 0 END) / COUNT(*) * 100, 2) AS win_rate,
        ROUND(SUM(CASE WHEN d.rise_ratio > 0 THEN 0 ELSE 1 END) / COUNT(*) * 100, 2) AS loss_rate
        FROM stock_strategy_deal d LEFT JOIN stock_strategy s on d.strategy_id = s.id
        LEFT JOIN (select strategy_id, count(1) as total from stock_strategy_deal group by strategy_id) t on t.strategy_id = d.strategy_id
        <where>
            <if test="sold!=null">
                and d.sold = #{sold}
            </if>
            <if test="start!=null and end!=null">
                and d.date between #{start} and #{end}
            </if>
            <if test="ids!=null and ids.length > 0">
                and d.strategy_id in
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </where>
        GROUP BY d.strategy_id
    </select>

    <insert id="insertOrUpdateBatch">
        INSERT INTO stock_stats (
        `date`, `strategy_id`, `sold`, `total`, `qty`,
        `profit_num`, `loss_num`, `proportion`, `rate`, `avg_rate`,
        `win_rate`, `loss_rate`
        )
        VALUES
        <foreach collection="entities" item="item" separator=",">
            (
            #{item.date}, #{item.strategyId}, #{item.sold}, #{item.total}, #{item.qty},
            #{item.profitNum}, #{item.lossNum}, #{item.proportion}, #{item.rate}, #{item.avgRate},
            #{item.winRate}, #{item.lossRate}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        `total` = VALUES(`total`),
        `qty` = VALUES(`qty`),
        `profit_num` = VALUES(`profit_num`),
        `loss_num` = VALUES(`loss_num`),
        `proportion` = VALUES(`proportion`),
        `rate` = VALUES(`rate`),
        `avg_rate` = VALUES(`avg_rate`),
        `win_rate` = VALUES(`win_rate`),
        `loss_rate` = VALUES(`loss_rate`);
    </insert>
</mapper>
