<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gmlee.stock.dao.mapper.StockStrategyDealMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.gmlee.stock.dao.entity.StockStrategyDeal">
        <id column="date" property="date"/>
        <result column="code" property="code"/>
        <result column="name" property="name"/>
        <result column="price" property="price"/>
        <result column="current_date" property="currentPrice"/>
        <result column="current_date" property="currentDate"/>
        <result column="days" property="days"/>
        <result column="sold" property="sold"/>
        <result column="strategy_id" property="strategyId"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        date, code, name, price, current_price, current_date, days, sold, strategy_id
    </sql>

    <insert id="insertOrUpdateBatch">
        INSERT INTO stock_strategy_deal (
        `date`, `code`, `name`, `price`, `current_price`,
        `current_date`, `rise_ratio`, `days`, `sold`, `strategy_id`
        )
        VALUES
        <foreach collection="entities" item="item" separator=",">
            (
            #{item.date}, #{item.code}, #{item.name}, #{item.price}, #{item.currentPrice},
            #{item.currentDate}, #{item.riseRatio}, #{item.days}, #{item.sold}, #{item.strategyId}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        `name` = VALUES(`name`),
        `price` = VALUES(`price`),
        `current_price` = VALUES(`current_price`),
        `current_date` = VALUES(`current_date`),
        `rise_ratio` = VALUES(`rise_ratio`),
        `days` = VALUES(`days`),
        `sold` = VALUES(`sold`);
    </insert>

    <!-- 统计查询 -->
    <select id="stats" resultType="java.util.Map">
        SELECT
        CONCAT(s.`name`,'v',s.v) '策略名称',
        (CASE
        WHEN d.sold THEN '卖出'
        WHEN !d.sold THEN '持有'
        END) AS '状态' ,
        ROUND(COUNT(*) / (select count(1) from stock_strategy_deal where strategy_id = d.strategy_id) * 100, 2) AS
        '占比%',
        COUNT(*) AS '总数(只)',
        SUM(d.rise_ratio) AS '盈亏%',
        SUM(CASE WHEN d.rise_ratio > 0 THEN 1 ELSE 0 END) AS '盈利(只)',
        ROUND(SUM(CASE WHEN d.rise_ratio > 0 THEN 1 ELSE 0 END) / COUNT(*) * 100, 2) AS '胜率%'
        FROM stock_strategy_deal d LEFT JOIN stock_strategy s on d.strategy_id = s.id
        <where>
            <if test="sold!=null">
                and d.sold = #{sold}
            </if>
            <if test="start!=null and end!=null">
                and d.date between #{start} and #{end}
            </if>
            <if test="ids!=null and ids.length > 0">
                and d.strategy_id in
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </where>
        GROUP BY d.strategy_id
    </select>
</mapper>
